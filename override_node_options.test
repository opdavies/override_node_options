<?php
// $Id$

/**
 * @file override_node_options.test
 * Provide tests for override_node_options.module
 * 
 * @todo: Write tests to check that submitting the node with the override permissions
 * actually has an effect on the database.
 */

class OverrideNodeOptionsTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Override Node Options basic functionality',
      'description' => 'Check that override permissions give the rights users the right functionality.',
      'group' => 'Override Node Options Tests',
    );
  }
  
  /**
   * Define and return array that describes the tests to run.
   *
   * This allows us to abstract the tests which are all of the form 'check
   * privileged user can see the form element while ordinary user cannot'.
   * 
   * @return
   *  An array of test set items, each of which itself is an array with the following
   *  keys:
   *  - perm: The permission the privileged user should have
   *  - message_string: The text to insert into assertion messages.
   *  - form_name_normal: The form element name on normal forms, ie what to check
   *    the ordinary user can't see.
   *  - form_name_override: The form element name on overridden forms, ie what 
   *    to check the privileged user can see.
   */
  private function testSets() {
    return array(
      'status' => array(
        'perm' => 'override page published option',
        'message_string' => 'Published checkbox',
        'form_name_normal' => 'status',
        'form_name_override' => 'override_publishing_status',
      ),
      'author' => array(
        'perm' => 'override page authored by option',
        'message_string' => 'Author field',
        'form_name_normal' => 'name',
        'form_name_override' => 'override_authored_by',
      ),
      'date' => array(
        'perm' => 'override page authored on option',
        'message_string' => 'Authored on date field',
        'form_name_normal' => 'date',
        'form_name_override' => 'override_authored_on',
      ),
      'promote' => array(
        'perm' => 'override page promote to front page option',
        'message_string' => 'Promoted checkbox',
        'form_name_normal' => 'promote',
        'form_name_override' => 'override_publishing_promote',
      ),
      'sticky' => array(
        'perm' => 'override page sticky option',  
        'message_string' => 'Sticky checkbox',
        'form_name_normal' => 'sticky',
        'form_name_override' => 'override_publishing_sticky',
      ),
      'revision' => array(
        'perm' => 'override page revision option',
        'message_string' => 'Published checkbox',
        'form_name_normal' => 'revision',
        'form_name_override' => 'override_publishing_revision',
      ),
    );
  }

  public function setUp() {
    parent::setUp('override_node_options');  // Enable any modules required for the test
  }

  // Create a mymodule node using the node form
  public function testOverrideNodeOptionsFieldVisibility() {
    // Create our regular user
    $ordinary_user = $this->drupalCreateUser(array('create page content', 'edit any page content'));
    $this->drupalLogin($ordinary_user);
    // We create and later edit a node rather than just look at /node/add/page because new nodes
    // don't show the revisions checkbox.
    $edit = array(
      'title' => $this->randomName(32),
      'body' => $this->randomName(64),
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));
    

    // We iterate over the test sets. 
    // For each set, we need to check an overridden user sees the form item, 
    // and a regular user does not.
    $test_set_list = $this->testSets();
    foreach ($test_set_list as $key => $test_set) {
      // Create and test the override user.
      $override_user = $this->drupalCreateUser(array('create page content', 'edit any page content', $test_set['perm']));
      $this->drupalLogin($override_user);
      $this->drupalGet('node/1/edit');
      
      $this->assertFieldByName($test_set['form_name_override'], '', t($test_set['message_string'] . ' is displayed to override user'));

      // Test that the current override user can't see any of the other fields
      // (eg, that if you have the override to publish you can't sticky.
      // Get the list of test sets and remove the item for the current test.
      $other_field_list = $test_set_list;
      unset($other_field_list[$key]);
      // Iterate over the other fields.
      foreach ($other_field_list as $other_field) {
        $this->assertNoField($other_field['form_name_override'], '', t($other_field['message_string'] . ' is not displayed to override user with ' . $test_set['message_string']));
      }
      
      // Test the regular user.
      $this->drupalLogin($ordinary_user);
      $this->drupalGet('node/1/edit');
      
      $this->assertNoField($test_set['form_name_override'], '', t($test_set['message_string'] . ' is not displayed to normal user'));
    }
  }

  // A utility function we can use in debugging our test. This outputs the screen
  // as an HTML file we can view, and uses the pass() method to report it to us
  // in the simpletest web interface
  private function outputScreenContents($description, $basename) {
    // This is a hack to get a directory that won't be cleaned up by simpletest
    $file_dir = file_directory_path().'/../simpletest_output_pages';
    if (!is_dir($file_dir)) {
      mkdir($file_dir, 0777, TRUE);
    }
    $output_path = "$file_dir/$basename." . $this->randomName(10) . '.html';
    $rv = file_put_contents($output_path, $this->drupalGetContent());
    $this->pass("$description: Contents of result page are ".l('here',$output_path));
  }
}